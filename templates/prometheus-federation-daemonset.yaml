{{- range $index, $item := .Values.prometheusInstances }}
{{- range $indexShard, $e := until (int (coalesce $item.shards 1)) }}
{{- if eq $.Values.replicaDaemonSet true }}
{{- if and (eq $.Values.thanos.enabled true) (eq $item.type "primary") }}
{{- else }}
---
apiVersion: apps/v1
{{ if eq $item.type "primary" }}kind: Deployment{{ end }}
{{ if eq $item.type "replica" }}kind: DaemonSet{{ end }}
metadata:
  name: {{ include "common.name" . }}-{{ $item.type }}-{{ $index }}-{{ $indexShard }}
  labels:
{{ include "common.selectorLabels" (dict "releaseName" $.Release.Name) | indent 4 }}
spec:
  {{ if eq $item.type "primary" }}
  replicas: 1
  strategy:
    type: "Recreate"
    rollingUpdate: null
  {{ end }}
  selector:
    matchLabels:
{{ include "common.selectorLabels" (dict "releaseName" $.Release.Name) | indent 6 }}
{{ printf "type: %s" $item.type | indent 6 }}
{{ printf "instance: %s-%d-%d" $item.type $index $indexShard | indent 6 }}
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false"
      labels:
{{ include "common.selectorLabels" (dict "releaseName" $.Release.Name) | indent 8 }}
{{ printf "type: %s" $item.type | indent 8 }}
{{ printf "instance: %s-%d-%d" $item.type $index $indexShard | indent 8 }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
    spec:
      {{ if eq $item.type "replica" }}
      tolerations:
        - operator: Exists
          effect: NoSchedule
      {{ end }}
{{- if $.Values.image.pullSecrets }}
      imagePullSecrets:
{{ toYaml $.Values.image.pullSecrets | indent 8 }}
{{- end }}
      serviceAccountName: {{ include "common.name" . }}
      initContainers:
      - name: prometheus-init
        image: alpine:3.17.0
        {{ if eq $item.type "primary" }}
        command: ['sh', '-c']
        args:
          - echo "## STARTING";
            echo "# creating customization directory"; mkdir /persistent-volume/prometheus-customization -p;
            echo "# copying configuration file"; cp /etc/prometheus/prometheus.yml /persistent-volume/prometheus-customization/primary.yml;
            echo "# creating persistent directory"; mkdir /persistent-volume/{{ include "common.name" . }}-{{ $item.type }}-{{ $index }}-{{ $indexShard }} -p;
            echo "## DONE";
        {{ else }}
        command: ['sh', '-c']
        args:
          - echo "## STARTING";
            echo "# creating customization directory"; mkdir /persistent-volume/prometheus-customization -p;
            echo "# copying configuration file"; cp /etc/prometheus/prometheus.yml /persistent-volume/prometheus-customization/$(CURRENT_NODE_NAME).yml;
            echo "# replace environment variable"; sed -i 's/${CURRENT_NODE_NAME}/$(CURRENT_NODE_NAME)/g' /persistent-volume/prometheus-customization/$(CURRENT_NODE_NAME).yml;
            echo "# creating persistent directory"; mkdir /persistent-volume/{{ include "common.name" . }}-$(CURRENT_NODE_NAME)-{{ $index }} -p;
            echo "# creating thanos sidecar directory"; mkdir /persistent-volume/thanos -p;
            echo "# creating thanos store directory"; mkdir /persistent-volume/thanos-store -p;
            echo "# creating thanos compactor directory"; mkdir /persistent-volume/thanos-compactor -p;
            echo "## DONE";
        {{ end }}
        env:
          - name: CURRENT_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage-volume
          mountPath: /persistent-volume
          readOnly: false
      containers:
      {{ if eq $item.type "replica" }}
      {{ if $.Values.thanos.enabled }}
      - name: thanos-sidecar
        image: "{{ $.Values.thanos.image.repository }}/thanos:{{ $.Values.thanos.image.tag }}"
        env:
          - name: CURRENT_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        args:
          - 'sidecar'
          - '--tsdb.path=/persistent-volume/{{ include "common.name" . }}-$(CURRENT_NODE_NAME)-{{ $index }}'
          - '--prometheus.url=http://localhost:9090'
          - '--http-address=0.0.0.0:19191'
          - '--grpc-address=0.0.0.0:19090'
          {{ if eq $.Values.developmentMode true }}
          - |
            --objstore.config=type: FILESYSTEM
            config:
              directory: "/persistent-volume/thanos"
          {{ end }}
        livenessProbe:
          failureThreshold: 4
          httpGet:
            path: /-/healthy
            port: 19191
            scheme: HTTP
          periodSeconds: 30
        readinessProbe:
          failureThreshold: 20
          httpGet:
            path: /-/ready
            port: 19191
            scheme: HTTP
          periodSeconds: 5
        volumeMounts:
          - name: prometheus-storage-volume
            mountPath: /persistent-volume
            readOnly: false
      {{ end }}
      {{ end }}
      - name: {{ include "common.name" . }}
        env:
          - name: CURRENT_NODE_NAME
            valueFrom:
              fieldRef:
                fieldPath: spec.nodeName
        {{ if $item.environmentVariables }}
          {{ range $env := $item.environmentVariables }}
          - name: {{ $env.name | quote }}
            value: {{ $env.value | quote }}
          {{ end }}
        {{ end }}
        resources:
          limits:
            cpu: {{ default "500m" $item.resourcesLimitsCpu }}
            memory: {{ default "1024Mi" $item.resourcesLimitsMemory }}
          requests:
            cpu: {{ default "150m" $item.resourcesRequestsCpu }}
            memory: {{ default "512Mi" $item.resourcesRequestsMemory }}
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
            scheme: HTTP
          initialDelaySeconds: {{ $.Values.readinessProbeInitialDelaySeconds }}
          periodSeconds: {{ $.Values.readinessProbePeriodSeconds }}
          timeoutSeconds: {{ $.Values.readinessProbeTimeoutSeconds }}
          failureThreshold: {{ $.Values.readinessProbeFailureThreshold }}
          successThreshold: {{ $.Values.readinessProbeSuccessThreshold }}
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
            scheme: HTTP
          initialDelaySeconds: {{ $.Values.livenessProbeInitialDelaySeconds }}
          periodSeconds: {{ $.Values.livenessProbePeriodSeconds }}
          timeoutSeconds: {{ $.Values.livenessProbeTimeoutSeconds }}
          failureThreshold: {{ $.Values.livenessProbeFailureThreshold }}
          successThreshold: {{ $.Values.livenessProbeSuccessThreshold }}
        image: "{{ $.Values.image.repository }}/prometheus:{{ $.Values.image.tag }}"
        args:
          - '--storage.tsdb.retention.time={{ default "2h" $item.storageTsdbRetentionTime }}'
          - '--storage.tsdb.retention.size={{ default "50GB" $item.storageTsdbRetentionSize }}'
          {{ if eq $item.type "primary" }}
          - '--config.file=/persistent-volume/prometheus-customization/primary.yml'
          - '--storage.tsdb.path=/persistent-volume/{{ include "common.name" . }}-{{ $item.type }}-{{ $index }}-{{ $indexShard }}'
          {{ else }}
          - '--config.file=/persistent-volume/prometheus-customization/$(CURRENT_NODE_NAME).yml'
          - '--storage.tsdb.path=/persistent-volume/{{ include "common.name" . }}-$(CURRENT_NODE_NAME)-{{ $index }}'
          - '--storage.tsdb.min-block-duration=2h'
          - '--storage.tsdb.max-block-duration=2h'
          {{ end }}
          - '--query.timeout={{ default "10s" $item.queryTimeout }}'
        ports:
        - name: prometheus
          containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-storage-volume
          mountPath: /persistent-volume
          readOnly: false
      restartPolicy: Always
      volumes:
      - name: prometheus-config
        configMap:
          name: {{ include "common.name" . }}-{{ $item.type }}-{{ $index }}-{{ $indexShard }}
      - name: prometheus-storage-volume
        persistentVolumeClaim:
          claimName: {{ include "common.name" . }}-{{ $item.type }}-{{ $index }}-{{ $indexShard }}
{{- end }}
{{- end }}
{{- end }}
{{- end }}